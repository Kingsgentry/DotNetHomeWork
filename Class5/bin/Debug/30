

<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en" > <!--<![endif]-->
<head>
  <meta charset="utf-8">
  
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>Protecting an API using Client Credentials &mdash; IdentityServer4 1.0.0 documentation</title>
  

  
  
    <link rel="shortcut icon" href="../_static/favicon.ico"/>
  
  
  

  

  
  
    

  

  <link rel="stylesheet" href="../_static/css/theme.css" type="text/css" />
  <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Protecting an API using Passwords" href="2_resource_owner_passwords.html" />
    <link rel="prev" title="Setup and Overview" href="0_overview.html" /> 

  
  <script src="../_static/js/modernizr.min.js"></script>


<!-- RTD Extra Head -->

<!-- 
Always link to the latest version, as canonical.
http://docs.readthedocs.org/en/latest/canonical.html
-->
<link rel="canonical" href="http://docs.identityserver.io/en/latest/quickstarts/1_client_credentials.html" />

<link rel="stylesheet" href="https://media.readthedocs.org/css/readthedocs-doc-embed.css" type="text/css" />

<script type="text/javascript" src="../_static/readthedocs-data.js"></script>

<!-- Add page-specific data, which must exist in the page js, not global -->
<script type="text/javascript">
READTHEDOCS_DATA['page'] = 'quickstarts/1_client_credentials'
READTHEDOCS_DATA['source_suffix'] = '.rst'
</script>

<script type="text/javascript" src="https://media.readthedocs.org/javascript/readthedocs-analytics.js"></script>

<!-- end RTD <extrahead> -->
</head>

<body class="wy-body-for-nav">

   
  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          

          
            <a href="../index.html" class="icon icon-home"> IdentityServer4
          

          
          </a>

          
            
            
            
              <div class="version">
                release
              </div>
            
          

          
<div role="search">
  <form id="rtd-search-form" class="wy-form" action="../search.html" method="get">
    <input type="text" name="q" placeholder="Search docs" />
    <input type="hidden" name="check_keywords" value="yes" />
    <input type="hidden" name="area" value="default" />
  </form>
</div>

          
        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
            
            
              
            
            
              <p class="caption"><span class="caption-text">Introduction</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro/big_picture.html">The Big Picture</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro/terminology.html">Terminology</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro/specs.html">Supported Specifications</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro/packaging.html">Packaging and Builds</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro/support.html">Support and Consulting Options</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro/test.html">Demo Server and Tests</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro/contributing.html">Contributing</a></li>
</ul>
<p class="caption"><span class="caption-text">Quickstarts</span></p>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="0_overview.html">Setup and Overview</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Protecting an API using Client Credentials</a><ul>
<li class="toctree-l2"><a class="reference internal" href="#defining-the-api">Defining the API</a></li>
<li class="toctree-l2"><a class="reference internal" href="#defining-the-client">Defining the client</a></li>
<li class="toctree-l2"><a class="reference internal" href="#configure-identityserver">Configure IdentityServer</a></li>
<li class="toctree-l2"><a class="reference internal" href="#adding-an-api">Adding an API</a></li>
<li class="toctree-l2"><a class="reference internal" href="#creating-the-client">Creating the client</a></li>
<li class="toctree-l2"><a class="reference internal" href="#further-experiments">Further experiments</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="2_resource_owner_passwords.html">Protecting an API using Passwords</a></li>
<li class="toctree-l1"><a class="reference internal" href="3_interactive_login.html">Adding User Authentication with OpenID Connect</a></li>
<li class="toctree-l1"><a class="reference internal" href="4_external_authentication.html">Adding Support for External Authentication</a></li>
<li class="toctree-l1"><a class="reference internal" href="5_hybrid_and_api_access.html">Switching to Hybrid Flow and adding API Access back</a></li>
<li class="toctree-l1"><a class="reference internal" href="6_aspnet_identity.html">Using ASP.NET Core Identity</a></li>
<li class="toctree-l1"><a class="reference internal" href="7_javascript_client.html">Adding a JavaScript client</a></li>
<li class="toctree-l1"><a class="reference internal" href="8_entity_framework.html">Using EntityFramework Core for configuration and operational data</a></li>
<li class="toctree-l1"><a class="reference internal" href="community.html">Community quickstarts &amp; samples</a></li>
</ul>
<p class="caption"><span class="caption-text">Topics</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../topics/startup.html">Startup</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/resources.html">Defining Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/clients.html">Defining Clients</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/signin.html">Sign-in</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/signin_external_providers.html">Sign-in with External Identity Providers</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/windows.html">Windows Authentication</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/signout.html">Sign-out</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/signout_external_providers.html">Sign-out of External Identity Providers</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/signout_federated.html">Federated Sign-out</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/federation_gateway.html">Federation Gateway</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/consent.html">Consent</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/apis.html">Protecting APIs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/deployment.html">Deployment</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/logging.html">Logging</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/events.html">Events</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/crypto.html">Cryptography, Keys and HTTPS</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/grant_types.html">Grant Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/secrets.html">Secrets</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/extension_grants.html">Extension Grants</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/resource_owner.html">Resource Owner Password Validation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/refresh_tokens.html">Refresh Tokens</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/reference_tokens.html">Reference Tokens</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/cors.html">CORS</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/discovery.html">Discovery</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/add_apis.html">Adding more API Endpoints</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/add_protocols.html">Adding new Protocols</a></li>
<li class="toctree-l1"><a class="reference internal" href="../topics/tools.html">Tools</a></li>
</ul>
<p class="caption"><span class="caption-text">Endpoints</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/discovery.html">Discovery Endpoint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/authorize.html">Authorize Endpoint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/token.html">Token Endpoint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/userinfo.html">UserInfo Endpoint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/device_authorization.html">Device Authorization Endpoint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/introspection.html">Introspection Endpoint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/revocation.html">Revocation Endpoint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../endpoints/endsession.html">End Session Endpoint</a></li>
</ul>
<p class="caption"><span class="caption-text">Reference</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../reference/identity_resource.html">Identity Resource</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/api_resource.html">API Resource</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/client.html">Client</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/grant_validation_result.html">GrantValidationResult</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/profileservice.html">Profile Service</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/interactionservice.html">IdentityServer Interaction Service</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/deviceflow_interactionservice.html">Device Flow Interaction Service</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/options.html">IdentityServer Options</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/ef.html">Entity Framework Support</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/aspnet_identity.html">ASP.NET Identity Support</a></li>
</ul>
<p class="caption"><span class="caption-text">Misc</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../misc/training.html">Training</a></li>
<li class="toctree-l1"><a class="reference internal" href="../misc/blogs.html">Blog posts</a></li>
<li class="toctree-l1"><a class="reference internal" href="../misc/videos.html">Videos</a></li>
</ul>

            
          
        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" aria-label="top navigation">
        
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../index.html">IdentityServer4</a>
        
      </nav>


      <div class="wy-nav-content">
        
        <div class="rst-content">
        
          















<div role="navigation" aria-label="breadcrumbs navigation">

  <ul class="wy-breadcrumbs">
    
      <li><a href="../index.html">Docs</a> &raquo;</li>
        
      <li>Protecting an API using Client Credentials</li>
    
    
      <li class="wy-breadcrumbs-aside">
        
            
            
              <a href="https://github.com/IdentityServer/IdentityServer4/blob/release/docs/quickstarts/1_client_credentials.rst" class="fa fa-github"> Edit on GitHub</a>
            
          
        
      </li>
    
  </ul>

  
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="protecting-an-api-using-client-credentials">
<h1>Protecting an API using Client Credentials<a class="headerlink" href="#protecting-an-api-using-client-credentials" title="Permalink to this headline">¶</a></h1>
<p>This quickstart presents the most basic scenario for protecting APIs using IdentityServer.</p>
<p>In this scenario we will define an API and a client that wants to access it.
The client will request an access token at IdentityServer and use it to gain access to the API.</p>
<div class="section" id="defining-the-api">
<h2>Defining the API<a class="headerlink" href="#defining-the-api" title="Permalink to this headline">¶</a></h2>
<p>Scopes define the resources in your system that you want to protect, e.g. APIs.</p>
<p>Since we are using the in-memory configuration for this walkthrough - all you need to do
to add an API, is to create an object of type <code class="docutils literal notranslate"><span class="pre">ApiResource</span></code> and set the appropriate properties.</p>
<p>Add a file (e.g. <code class="docutils literal notranslate"><span class="pre">Config.cs</span></code>) into your project and add the following code:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ApiResource</span><span class="p">&gt;</span> <span class="n">GetApiResources</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ApiResource</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">new</span> <span class="nf">ApiResource</span><span class="p">(</span><span class="s">&quot;api1&quot;</span><span class="p">,</span> <span class="s">&quot;My API&quot;</span><span class="p">)</span>
    <span class="p">};</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="defining-the-client">
<h2>Defining the client<a class="headerlink" href="#defining-the-client" title="Permalink to this headline">¶</a></h2>
<p>The next step is to define a client that can access this API.</p>
<p>For this scenario, the client will not have an interactive user, and will authenticate
using the so called client secret with IdentityServer.
Add the following code to your <cite>Config.cs</cite> file:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Client</span><span class="p">&gt;</span> <span class="n">GetClients</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Client</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">new</span> <span class="n">Client</span>
        <span class="p">{</span>
            <span class="n">ClientId</span> <span class="p">=</span> <span class="s">&quot;client&quot;</span><span class="p">,</span>

            <span class="c1">// no interactive user, use the clientid/secret for authentication</span>
            <span class="n">AllowedGrantTypes</span> <span class="p">=</span> <span class="n">GrantTypes</span><span class="p">.</span><span class="n">ClientCredentials</span><span class="p">,</span>

            <span class="c1">// secret for authentication</span>
            <span class="n">ClientSecrets</span> <span class="p">=</span>
            <span class="p">{</span>
                <span class="k">new</span> <span class="nf">Secret</span><span class="p">(</span><span class="s">&quot;secret&quot;</span><span class="p">.</span><span class="n">Sha256</span><span class="p">())</span>
            <span class="p">},</span>

            <span class="c1">// scopes that client has access to</span>
            <span class="n">AllowedScopes</span> <span class="p">=</span> <span class="p">{</span> <span class="s">&quot;api1&quot;</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="configure-identityserver">
<h2>Configure IdentityServer<a class="headerlink" href="#configure-identityserver" title="Permalink to this headline">¶</a></h2>
<p>To configure IdentityServer to use your scopes and client definition, you need to add code
to the <code class="docutils literal notranslate"><span class="pre">ConfigureServices</span></code> method.
You can use convenient extension methods for that -
under the covers these add the relevant stores and data into the DI system:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// configure identity server with in-memory stores, keys, clients and resources</span>
    <span class="n">services</span><span class="p">.</span><span class="n">AddIdentityServer</span><span class="p">()</span>
        <span class="p">.</span><span class="n">AddDeveloperSigningCredential</span><span class="p">()</span>
        <span class="p">.</span><span class="n">AddInMemoryApiResources</span><span class="p">(</span><span class="n">Config</span><span class="p">.</span><span class="n">GetApiResources</span><span class="p">())</span>
        <span class="p">.</span><span class="n">AddInMemoryClients</span><span class="p">(</span><span class="n">Config</span><span class="p">.</span><span class="n">GetClients</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
</div>
<p>That’s it - if you run the server and navigate the browser to
<code class="docutils literal notranslate"><span class="pre">http://localhost:5000/.well-known/openid-configuration</span></code>, you should see the so-called
discovery document.
This will be used by your clients and APIs to download the necessary configuration data.</p>
<img alt="../_images/1_discovery.png" src="../_images/1_discovery.png" />
</div>
<div class="section" id="adding-an-api">
<h2>Adding an API<a class="headerlink" href="#adding-an-api" title="Permalink to this headline">¶</a></h2>
<p>Next, add an API to your solution.</p>
<p>You can use the ASP.NET Core Web API template.
Again, we recommend you take control over the ports and use the same technique as you used
to configure Kestrel and the launch profile as before.
This walkthrough assumes you have configured your API to run on <code class="docutils literal notranslate"><span class="pre">http://localhost:5001</span></code>.</p>
<p><strong>The controller</strong></p>
<p>Add a new controller to your API project:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="na">[Route(&quot;identity&quot;)]</span>
<span class="na">[Authorize]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">IdentityController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
<span class="na">    [HttpGet]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JsonResult</span><span class="p">(</span><span class="k">from</span> <span class="n">c</span> <span class="k">in</span> <span class="n">User</span><span class="p">.</span><span class="n">Claims</span> <span class="k">select</span> <span class="k">new</span> <span class="p">{</span> <span class="n">c</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">Value</span> <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This controller will be used later to test the authorization requirement, as well
as visualize the claims identity through the eyes of the API.</p>
<p><strong>Configuration</strong></p>
<p>The last step is to add the authentication services to DI and the authentication middleware to the pipeline.
These will:</p>
<ul class="simple">
<li>validate the incoming token to make sure it is coming from a trusted issuer</li>
<li>validate that the token is valid to be used with this api (aka scope)</li>
</ul>
<p>Add the <cite>IdentityServer4.AccessTokenValidation</cite> NuGet package to your project.</p>
<img alt="../_images/1_nuget_accesstokenvalidation.png" src="../_images/1_nuget_accesstokenvalidation.png" />
<p>Update <cite>Startup</cite> to look like this:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">services</span><span class="p">.</span><span class="n">AddMvcCore</span><span class="p">()</span>
            <span class="p">.</span><span class="n">AddAuthorization</span><span class="p">()</span>
            <span class="p">.</span><span class="n">AddJsonFormatters</span><span class="p">();</span>

        <span class="n">services</span><span class="p">.</span><span class="n">AddAuthentication</span><span class="p">(</span><span class="s">&quot;Bearer&quot;</span><span class="p">)</span>
            <span class="p">.</span><span class="n">AddIdentityServerAuthentication</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Authority</span> <span class="p">=</span> <span class="s">&quot;http://localhost:5000&quot;</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">RequireHttpsMetadata</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

                <span class="n">options</span><span class="p">.</span><span class="n">ApiName</span> <span class="p">=</span> <span class="s">&quot;api1&quot;</span><span class="p">;</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">app</span><span class="p">.</span><span class="n">UseAuthentication</span><span class="p">();</span>

        <span class="n">app</span><span class="p">.</span><span class="n">UseMvc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">AddAuthentication</span></code> adds the authentication services to DI and configures <code class="docutils literal notranslate"><span class="pre">&quot;Bearer&quot;</span></code> as the default scheme.
<code class="docutils literal notranslate"><span class="pre">AddIdentityServerAuthentication</span></code> adds the IdentityServer access token validation handler into DI for use by the authentication services.
<code class="docutils literal notranslate"><span class="pre">UseAuthentication</span></code> adds the authentication middleware to the pipeline so authentication will be performed automatically on every call into the host.</p>
<p>If you use the browser to navigate to the controller (<code class="docutils literal notranslate"><span class="pre">http://localhost:5001/identity</span></code>),
you should get a 401 status code in return. This means your API requires a credential.</p>
<p>That’s it, the API is now protected by IdentityServer.</p>
</div>
<div class="section" id="creating-the-client">
<h2>Creating the client<a class="headerlink" href="#creating-the-client" title="Permalink to this headline">¶</a></h2>
<p>The last step is to write a client that requests an access token, and then uses this
token to access the API. For that, add a console project to your solution (see full code <a class="reference external" href="https://github.com/IdentityServer/IdentityServer4.Samples/blob/release/Quickstarts/1_ClientCredentials/src/Client/Program.cs">here</a>).</p>
<p>The token endpoint at IdentityServer implements the OAuth 2.0 protocol, and you could use
raw HTTP to access it. However, we have a client library called IdentityModel, that
encapsulates the protocol interaction in an easy to use API.</p>
<p>Add the <cite>IdentityModel</cite> NuGet package to your application.</p>
<img alt="../_images/1_nuget_identitymodel.png" src="../_images/1_nuget_identitymodel.png" />
<p>IdentityModel includes a client library to use with the discovery endpoint.
This way you only need to know the base-address of IdentityServer - the actual
endpoint addresses can be read from the metadata:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="c1">// discover endpoints from metadata</span>
<span class="kt">var</span> <span class="n">disco</span> <span class="p">=</span> <span class="k">await</span> <span class="n">DiscoveryClient</span><span class="p">.</span><span class="n">GetAsync</span><span class="p">(</span><span class="s">&quot;http://localhost:5000&quot;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">disco</span><span class="p">.</span><span class="n">IsError</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">disco</span><span class="p">.</span><span class="n">Error</span><span class="p">);</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Next you can use the <code class="docutils literal notranslate"><span class="pre">TokenClient</span></code> class to request the token.
To create an instance you need to pass in the token endpoint address, client id and secret.</p>
<p>Next you can use the <code class="docutils literal notranslate"><span class="pre">RequestClientCredentialsAsync</span></code> method to request a token for your API:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="c1">// request token</span>
<span class="kt">var</span> <span class="n">tokenClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TokenClient</span><span class="p">(</span><span class="n">disco</span><span class="p">.</span><span class="n">TokenEndpoint</span><span class="p">,</span> <span class="s">&quot;client&quot;</span><span class="p">,</span> <span class="s">&quot;secret&quot;</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">tokenResponse</span> <span class="p">=</span> <span class="k">await</span> <span class="n">tokenClient</span><span class="p">.</span><span class="n">RequestClientCredentialsAsync</span><span class="p">(</span><span class="s">&quot;api1&quot;</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="n">tokenResponse</span><span class="p">.</span><span class="n">IsError</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">tokenResponse</span><span class="p">.</span><span class="n">Error</span><span class="p">);</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">tokenResponse</span><span class="p">.</span><span class="n">Json</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Copy and paste the access token from the console to <a class="reference external" href="https://jwt.io">jwt.io</a> to inspect the raw token.</p>
</div>
<p>The last step is now to call the API.</p>
<p>To send the access token to the API you typically use the HTTP Authorization header.
This is done using the <code class="docutils literal notranslate"><span class="pre">SetBearerToken</span></code> extension method:</p>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="c1">// call api</span>
<span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="p">();</span>
<span class="n">client</span><span class="p">.</span><span class="n">SetBearerToken</span><span class="p">(</span><span class="n">tokenResponse</span><span class="p">.</span><span class="n">AccessToken</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">GetAsync</span><span class="p">(</span><span class="s">&quot;http://localhost:5001/identity&quot;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(!</span><span class="n">response</span><span class="p">.</span><span class="n">IsSuccessStatusCode</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">content</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">ReadAsStringAsync</span><span class="p">();</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">JArray</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">content</span><span class="p">));</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The output should look like this:</p>
<img alt="../_images/1_client_screenshot.png" src="../_images/1_client_screenshot.png" />
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">By default an access token will contain claims about the scope, lifetime (nbf and exp), the client ID (client_id) and the issuer name (iss).</p>
</div>
</div>
<div class="section" id="further-experiments">
<h2>Further experiments<a class="headerlink" href="#further-experiments" title="Permalink to this headline">¶</a></h2>
<p>This walkthrough focused on the success path so far</p>
<ul class="simple">
<li>client was able to request token</li>
<li>client could use the token to access the API</li>
</ul>
<p>You can now try to provoke errors to learn how the system behaves, e.g.</p>
<ul class="simple">
<li>try to connect to IdentityServer when it is not running (unavailable)</li>
<li>try to use an invalid client id or secret to request the token</li>
<li>try to ask for an invalid scope during the token request</li>
<li>try to call the API when it is not running (unavailable)</li>
<li>don’t send the token to the API</li>
<li>configure the API to require a different scope than the one in the token</li>
</ul>
</div>
</div>


           </div>
           
          </div>
          <footer>
  
    <div class="rst-footer-buttons" role="navigation" aria-label="footer navigation">
      
        <a href="2_resource_owner_passwords.html" class="btn btn-neutral float-right" title="Protecting an API using Passwords" accesskey="n" rel="next">Next <span class="fa fa-arrow-circle-right"></span></a>
      
      
        <a href="0_overview.html" class="btn btn-neutral" title="Setup and Overview" accesskey="p" rel="prev"><span class="fa fa-arrow-circle-left"></span> Previous</a>
      
    </div>
  

  <hr/>

  <div role="contentinfo">
    <p>
        &copy; Copyright 2016, Brock Allen &amp; Dominick Baier
      
        <span class="commit">
          Revision <code>3881a3ad</code>.
        </span>
      

    </p>
  </div>
  Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/rtfd/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>. 

</footer>

        </div>
      </div>

    </section>

  </div>
  

  <div class="rst-versions" data-toggle="rst-versions" role="note" aria-label="versions">
    <span class="rst-current-version" data-toggle="rst-current-version">
      <span class="fa fa-book"> Read the Docs</span>
      v: release
      <span class="fa fa-caret-down"></span>
    </span>
    <div class="rst-other-versions">
      <dl>
        <dt>Versions</dt>
        
          <dd><a href="/en/latest/">latest</a></dd>
        
          <dd><a href="/en/updatedqs/">updatedqs</a></dd>
        
          <dd><a href="/en/release/">release</a></dd>
        
          <dd><a href="/en/dev/">dev</a></dd>
        
          <dd><a href="/en/aspnetcore1/">aspnetcore1</a></dd>
        
      </dl>
      <dl>
        <dt>Downloads</dt>
        
          <dd><a href="//readthedocs.org/projects/identityserver4/downloads/pdf/release/">pdf</a></dd>
        
          <dd><a href="//readthedocs.org/projects/identityserver4/downloads/htmlzip/release/">htmlzip</a></dd>
        
          <dd><a href="//readthedocs.org/projects/identityserver4/downloads/epub/release/">epub</a></dd>
        
      </dl>
      <dl>
        <dt>On Read the Docs</dt>
          <dd>
            <a href="//readthedocs.org/projects/identityserver4/?fromdocs=identityserver4">Project Home</a>
          </dd>
          <dd>
            <a href="//readthedocs.org/builds/identityserver4/?fromdocs=identityserver4">Builds</a>
          </dd>
      </dl>
      <hr/>
      Free document hosting provided by <a href="http://www.readthedocs.org">Read the Docs</a>.

    </div>
  </div>



  

    
    
      <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
        <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-2.0.3.min.js"></script>
        <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-migrate-1.2.1.min.js"></script>
        <script type="text/javascript" src="https://media.readthedocs.org/javascript/underscore.js"></script>
        <script type="text/javascript" src="https://media.readthedocs.org/javascript/doctools.js"></script>
        <script type="text/javascript" src="https://media.readthedocs.org/javascript/readthedocs-doc-embed.js"></script>
    

  

  <script type="text/javascript" src="../_static/js/theme.js"></script>

  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.Navigation.enable(true);
      });
  </script> 

</body>
</html>